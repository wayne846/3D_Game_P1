// Each #kernel tells which function to compile; you can have many kernels
// 包含實際 Ray Tracing 和 Shading 的計算
#pragma kernel CSMain
#include "BasicRay.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;

HitInfo Trace(Ray ray)
{
    HitInfo bestHit = CreateEmptyHitInfo();
    IntersectSphere(ray, float4(1, 1, 1, 5), bestHit);
    IntersectSphere(ray, float4(5, 5, 5, 2), bestHit);
    float u, v;
    IntersectTriangle_MT97(ray, float3(0, 0, 0), float3(0, 1, 0), float3(1, 0, 0), bestHit, u, v);
    return bestHit;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    Ray ray = CreateCameraRay(id.x, id.y);
    HitInfo hitInfo = Trace(ray);

    if (isfinite(hitInfo.distance))
        // 將法向量從 [-1, 1] map 到 [0, 1]
        Result[id.xy] = float4(normalize(hitInfo.normal) * 0.5f + 0.5f, 1.0);
    else
        Result[id.xy] = float4(1, 0, 0, 1);
}
